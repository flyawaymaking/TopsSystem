package com.flyaway.tops.rewards;

import com.flyaway.tops.TopsPlugin;
import com.flyaway.tops.config.ConfigManager;
import com.flyaway.tops.manager.TopManager;
import com.flyaway.tops.model.TopCategory;
import com.flyaway.tops.model.TopPlayer;
import org.bukkit.Bukkit;
import org.bukkit.OfflinePlayer;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;
import su.nightexpress.coinsengine.api.CoinsEngineAPI;
import su.nightexpress.coinsengine.api.currency.Currency;

import java.time.DayOfWeek;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjusters;
import java.util.*;
import java.util.stream.Collectors;
import java.util.concurrent.TimeUnit;

public class WeeklyRewardManager {
    private final TopsPlugin plugin;
    private final TopManager topManager;
    private final ConfigManager configManager;
    private BukkitTask weeklyTask;
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss");

    public WeeklyRewardManager(TopsPlugin plugin, TopManager topManager) {
        this.plugin = plugin;
        this.topManager = topManager;
        this.configManager = plugin.getConfigManager();
        checkMissedRewardDistribution();
        startWeeklyRewardTask();
    }

    public void disable() {
        if (weeklyTask != null) {
            weeklyTask.cancel();
            weeklyTask = null;
        }
    }

    private void startWeeklyRewardTask() {
        this.weeklyTask = new BukkitRunnable() {
            @Override
            public void run() {
                distributeWeeklyRewards();
            }
        }.runTaskTimerAsynchronously(plugin, calculateInitialDelay(), TimeUnit.DAYS.toSeconds(7) * 20L);
    }

    private void saveLastRewardTime() {
        plugin.getConfig().set("last-reward-time", LocalDateTime.now().format(FORMATTER));
        plugin.saveConfig();
        plugin.getLogger().info("üíæ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ config.yml");
    }

    private void checkMissedRewardDistribution() {
        String lastRewardStr = plugin.getConfig().getString("last-reward-time", null);
        if (lastRewardStr == null || lastRewardStr.isEmpty()) {
            plugin.getLogger().info("‚è≥ –ù–∞–≥—Ä–∞–¥—ã –µ—â—ë –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏—Å—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É.");
            return;
        }

        try {
            LocalDateTime lastRewardTime = LocalDateTime.parse(lastRewardStr, FORMATTER);
            Duration since = Duration.between(lastRewardTime, LocalDateTime.now());

            if (since.toDays() >= 7) {
                plugin.getLogger().warning("‚ö†Ô∏è –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–¥–∞—á–∏ (" + lastRewardStr + "). –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–¥–∞—á—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥!");

                new BukkitRunnable() {
                    @Override
                    public void run() {
                        distributeWeeklyRewards();
                    }
                }.runTaskLaterAsynchronously(plugin, 30 * 20L);

            } else {
                plugin.getLogger().info("‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥ –±—ã–ª–∞ " + lastRewardStr + " (" + since.toDays() + " –¥–Ω. –Ω–∞–∑–∞–¥)");
            }

        } catch (Exception e) {
            plugin.getLogger().warning("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–¥–∞—á–∏: " + e.getMessage());
        }
    }

    private long calculateInitialDelay() {
        String rewardTime = configManager.getRewardTime();
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime nextReward = parseRewardTime(rewardTime, now);

        // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
        if (nextReward.isBefore(now)) {
            nextReward = nextReward.plusWeeks(1);
        }

        long delay = java.time.Duration.between(now, nextReward).getSeconds();
        plugin.getLogger().info("–°–ª–µ–¥—É—é—â–∞—è –≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥ —á–µ—Ä–µ–∑ " + delay + " —Å–µ–∫—É–Ω–¥ (" + rewardTime + ")");
        return delay * 20L; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–∏–∫–∏
    }

    private LocalDateTime parseRewardTime(String rewardTime, LocalDateTime baseTime) {
        try {
            // –§–æ—Ä–º–∞—Ç: "DAY_OF_WEEK HH:mm" –Ω–∞–ø—Ä–∏–º–µ—Ä "SUNDAY 18:00"
            String[] parts = rewardTime.split(" ");
            if (parts.length != 2) {
                throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: " + rewardTime);
            }

            DayOfWeek dayOfWeek = DayOfWeek.valueOf(parts[0].toUpperCase());
            LocalTime time = LocalTime.parse(parts[1], DateTimeFormatter.ofPattern("HH:mm"));

            return baseTime.with(TemporalAdjusters.nextOrSame(dayOfWeek))
                          .withHour(time.getHour())
                          .withMinute(time.getMinute())
                          .withSecond(0)
                          .withNano(0);

        } catch (Exception e) {
            plugin.getLogger().warning("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–≥—Ä–∞–¥: " + rewardTime + ". –ò—Å–ø–æ–ª—å–∑—É—é –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 18:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
            return baseTime.with(TemporalAdjusters.next(DayOfWeek.SUNDAY))
                          .withHour(18)
                          .withMinute(0)
                          .withSecond(0)
                          .withNano(0);
        }
    }

    public void distributeWeeklyRewards() {
        plugin.getLogger().info("–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥...");

        topManager.forceUpdateCache(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ç–æ–ø–æ–≤ –ø–µ—Ä–µ–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–≥—Ä–∞–¥
        processRewardDistribution(); // –í—ã–¥–∞—ë–º –Ω–∞–≥—Ä–∞–¥—ã
    }

    private void processRewardDistribution() {
        List<RewardResult> allRewards = new ArrayList<>();

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–µ–ø–µ—Ä—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
        for (TopCategory category : topManager.getAllCategories()) {
            List<RewardResult> categoryRewards = distributeRewardsForCategory(category);
            allRewards.addAll(categoryRewards);
        }

        topManager.afterRewardDistribution();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        broadcastRewardMessages(allRewards);

        plugin.getLogger().info("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è " + allRewards.size() + " –∏–≥—Ä–æ–∫–æ–≤");

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        logRewardDistribution(allRewards);

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥
        saveLastRewardTime();
    }

    private List<RewardResult> distributeRewardsForCategory(TopCategory category) {
        List<RewardResult> rewards = new ArrayList<>();
        List<TopPlayer> topPlayers = category.getTopPlayers();

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        plugin.getLogger().info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + category.getDisplayName() +
                               " (–∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–æ–ø–µ: " + topPlayers.size() + ")");

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for (int position : configManager.getRewardPositions()) {
            int index = position - 1; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (1 -> 0, 2 -> 1, –∏ —Ç.–¥.)

            if (index >= 0 && index < topPlayers.size()) {
                TopPlayer topPlayer = topPlayers.get(index);
                int coins = configManager.getRewardForPosition(position);

                if (coins > 0) {
                    boolean success = giveCoinsToPlayer(topPlayer.getUuid(), coins, category, position);
                    if (success) {
                        rewards.add(new RewardResult(topPlayer, category, position, coins));
                    }
                }
            }
        }

        if (rewards.isEmpty()) {
            plugin.getLogger().info("–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + category.getDisplayName() + " –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è");
        }

        return rewards;
    }

    private boolean giveCoinsToPlayer(UUID playerUuid, int coins, TopCategory category, int position) {
        try {
            OfflinePlayer player = Bukkit.getOfflinePlayer(playerUuid);
            String playerName = player.getName() != null ? player.getName() : "Unknown";

            // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã —á–µ—Ä–µ–∑ CoinsEngine —Å –≤–∞–ª—é—Ç–æ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            try {
                Currency currency = CoinsEngineAPI.getCurrency(configManager.getRewardCurrency());
                if (currency != null) {
                    CoinsEngineAPI.addBalance(playerUuid, currency, coins);
                    plugin.getLogger().info("–í—ã–¥–∞–Ω–æ " + coins + " " + configManager.getRewardCurrency() +
                                           " –∏–≥—Ä–æ–∫—É " + playerName +
                                           " –∑–∞ " + position + " –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + category.getDisplayName());
                } else {
                    plugin.getLogger().warning("–í–∞–ª—é—Ç–∞ " + configManager.getRewardCurrency() + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ CoinsEngine!");
                }
            } catch (Exception e) {
                plugin.getLogger().warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å " + coins + " " + configManager.getRewardCurrency() +
                                         " –∏–≥—Ä–æ–∫—É " + playerName + " —á–µ—Ä–µ–∑ CoinsEngine: " + e.getMessage());
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–Ω–ª–∞–π–Ω
            Player onlinePlayer = Bukkit.getPlayer(playerUuid);
            if (onlinePlayer != null && onlinePlayer.isOnline()) {
                String positionText = getPositionText(position);
                String message = "¬ßd¬ßl–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ç–æ–ø! ¬ßf–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ " + positionText + "¬ßf –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + category.getDisplayName();
                onlinePlayer.sendMessage(message);
            }

            return true;
        } catch (Exception e) {
            plugin.getLogger().warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –Ω–∞–≥—Ä–∞–¥—ã –∏–≥—Ä–æ–∫—É " + playerUuid + ": " + e.getMessage());
            return false;
        }
    }

    private String getPositionText(int position) {
        return switch (position) {
            case 1 -> "¬ß6–ø–µ—Ä–≤–æ–µ";
            case 2 -> "¬ß7–≤—Ç–æ—Ä–æ–µ";
            case 3 -> "¬ßc—Ç—Ä–µ—Ç—å–µ";
            default -> position + "-–µ";
        };
    }

    private void broadcastRewardMessages(List<RewardResult> rewards) {
        if (rewards.isEmpty()) {
            Bukkit.broadcastMessage("¬ßd¬ßl=== –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç–æ–ø—ã ===");
            Bukkit.broadcastMessage("¬ßc–í —ç—Ç–æ–º –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è!");
            Bukkit.broadcastMessage("¬ße–°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã: " + configManager.getRewardTime());
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        Bukkit.broadcastMessage("¬ßd¬ßl=== –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç–æ–ø—ã ===");
        Bukkit.broadcastMessage("¬ßf–í—ã–¥–∞–Ω—ã –Ω–∞–≥—Ä–∞–¥—ã —Ç–æ–ø –∏–≥—Ä–æ–∫–∞–º –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!");

        String currencySymbol = configManager.getCurrencySymbol();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for (int position : configManager.getRewardPositions()) {
            int reward = configManager.getRewardForPosition(position);
            if (reward > 0) {
                String positionColor = getPositionColor(position);
                Bukkit.broadcastMessage(positionColor + "–ó–∞ " + position + " –º–µ—Å—Ç–æ¬ße - " + reward + currencySymbol);
            }
        }

        Bukkit.broadcastMessage("¬ßf–°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã: " + configManager.getRewardTime());
    }

    private String getPositionColor(int position) {
        return switch (position) {
            case 1 -> "¬ß6";
            case 2 -> "¬ß7";
            case 3 -> "¬ßc";
            default -> "¬ße";
        };
    }

    private void logRewardDistribution(List<RewardResult> rewards) {
        if (rewards.isEmpty()) {
            plugin.getLogger().info("–ù–∞–≥—Ä–∞–¥—ã –Ω–µ –±—ã–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã - –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤");
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–≥—Ä–æ–∫–∞–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        Map<String, List<RewardResult>> rewardsByPlayer = new HashMap<>();
        for (RewardResult reward : rewards) {
            String playerName = reward.getPlayerName();
            rewardsByPlayer.computeIfAbsent(playerName, k -> new ArrayList<>()).add(reward);
        }

        String currencySymbol = configManager.getCurrencySymbol();
        plugin.getLogger().info("=== –î–ï–¢–ê–õ–ò –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ù–ê–ì–†–ê–î ===");
        plugin.getLogger().info("–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: " + rewardsByPlayer.size());
        plugin.getLogger().info("–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: " + rewards.size());
        plugin.getLogger().info("–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞: " + configManager.getRewardCurrency() + " (" + currencySymbol + ")");

        for (Map.Entry<String, List<RewardResult>> entry : rewardsByPlayer.entrySet()) {
            String playerName = entry.getKey();
            List<RewardResult> playerRewards = entry.getValue();
            int totalCoins = playerRewards.stream().mapToInt(RewardResult::getCoins).sum();

            String categories = playerRewards.stream()
                .map(reward -> reward.getCategory().getDisplayName() + " (#" + reward.getPosition() + ")")
                .collect(Collectors.joining(", "));

            plugin.getLogger().info("–ò–≥—Ä–æ–∫ " + playerName + ": " + totalCoins + currencySymbol + " (" + categories + ")");
        }
        plugin.getLogger().info("=================================");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    public void forceDistributeRewards() {
        plugin.getLogger().info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥...");
        plugin.getLogger().info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞...");
        topManager.forceUpdateCache();

        new BukkitRunnable() {
            @Override
            public void run() {
                processRewardDistribution();
            }
        }.runTaskLaterAsynchronously(plugin, 5 * 20L);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–≥—Ä–∞–¥
    private static class RewardResult {
        private final TopPlayer player;
        private final TopCategory category;
        private final int position;
        private final int coins;

        public RewardResult(TopPlayer player, TopCategory category, int position, int coins) {
            this.player = player;
            this.category = category;
            this.position = position;
            this.coins = coins;
        }

        public String getPlayerName() {
            return player.getPlayerName();
        }

        public TopCategory getCategory() {
            return category;
        }

        public int getPosition() {
            return position;
        }

        public int getCoins() {
            return coins;
        }
    }
}
